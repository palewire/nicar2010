h1. README

A guide, by "Aron Pilhofer":http://github.com/pilhofer.

*01. Create your Django project*

<pre><code>django-admin.py startproject ona</code></pre>

*02. Test it*

<pre><code>python manage.py runserver</code></pre>

*03. After you configure, syncdb*

<pre><code>python manage.py syncdb</code></pre>

*04. create an application, call it polls*

<pre><code>python manage.py startapp polls</code></pre>

*05. define two models in models.py*

<pre><code>class Project(models.Model):
    title = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')
    active_flag = models.BooleanField()

class Vote(models.Model):
    project = models.ForeignKey(Project)
    choice = models.IntegerField()
    #category = models.CharField(max_length=200)
    #user_ip = models.CharField(max_length=200)</code></pre>

*06. add line to settings.py as an installed app*

<pre><code>'ona.polls',</code></pre>

*07. sync your db*

<pre><code>python manage.py syncdb</code></pre>

*08. add a string representation of your object to the model project*

<pre><code>def __unicode__(self):
    return self.title</code></pre>

*09. add to settings.py as an installed app*

<pre><code>django.contrib.admin</code></pre>

*10. sync db*

<pre><code>python manage.py syncdb</code></pre>

*11. enable admin. in urls.py, uncomment*

<pre><code>from django.contrib import admin
admin.autodiscover()</code></pre>

*...and...*

<pre><code>(r'^admin/', include(admin.site.urls)),</code></pre>

*12. fire up the server, and log in*

<pre><code>python manage.py runserver</code></pre>

*13. add your app to the admin. create a file called admin.py in your project (make joke about conventions), and add:*

<pre><code>from ona.polls.models import Project
from django.contrib import admin

admin.site.register(Project)</code></pre>

*14. add vote to the admin.py file so we can see associations*

<pre><code>from ona.polls.models import Vote
admin.site.register(Vote)</code></pre>

*15. Add the urls we need for the rest of our app urls.py*

<pre><code>(r'^admin/', include(admin.site.urls)),
(r'^polls/$', 'ona.polls.views.index'),
(r'^polls/(?P<poll_id>\d+)/$', 'ona.polls.views.detail'),
(r'^polls/(?P<poll_id>\d+)/vote/$', 'ona.polls.views.vote'),
(r'^polls/(?P<poll_id>\d+)/data.xml$', 'ona.polls.views.data'),
(r'^crossdomain.xml$', 'ona.polls.views.crossdomain'),
(r'^pages/(?P<path>.*)$', 'django.views.static.serve', {'document_root': settings.STATIC_DOC_ROOT }),</code></pre>

*16. create a view. in views.py*

<pre><code>from django.http import HttpResponse

def index(request):
    return HttpResponse("Hello, world. You're at the poll index.")</code></pre>

*17 add a new method to your views.py, to see how django passes parameters*

<pre><code>def detail(request, poll_id):
    return HttpResponse("You're looking at poll %s." % poll_id)</code></pre>

*18. Add a bunch of stuff up at the top of views.py we will need later*

<pre><code>from django.shortcuts import get_object_or_404, render_to_response
from ona.polls.models import Project, Vote
from django.http import HttpResponseRedirect, HttpResponse
from django.core.urlresolvers import reverse
from django.db.models import Sum</code></pre>

*19. In sttings.py, let's set a path to our templates folder and add a setting for our static pages*

<pre><code>TEMPLATE_DIRS =  "/Path/to/your/stuff"
STATIC_DOC_ROOT = "/Path/to/your/stuff"</code></pre>

*20. In our views.py, let's change our index view to pull some real data*

<pre><code>def index(request):
    projects = Project.objects.all().order_by('-pub_date')[:5]
    return render_to_response('polls/index.html', {'projects': projects})</code></pre>

*21. and create an index.html file*

<pre><code>{% if projects %}
    <ul>
    {% for project in projects %}
        <li>{{ project.title }}</li>
    {% endfor %}
    </ul>
{% else %}
    <p>No projects are available.</p>
{% endif %}</code></pre>

*22. tweak our details method in views.py*

<pre><code>def detail(request, poll_id):
    p = Project.objects.get(pk=poll_id)
    total = p.vote_set.count()
    return render_to_response('polls/detail.html', {'project': p, 'vote_total': total, })</code></pre>

*23. add a votes method to views.py*

<pre><code>def vote(request, poll_id):
    p = get_object_or_404(Project, pk=poll_id)
    v = p.vote_set.create(choice = request.POST['data'])
    v.save()
    return HttpResponse(status=200)</code></pre>

*24. add a data method to views.py*

<pre><code>def data(request, poll_id):
    p = Project.objects.get(pk=poll_id)
    total = p.vote_set.aggregate(Sum('choice'))
    return render_to_response('polls/data.xml', {'project': p, 'vote_total': total['choice__sum'], }, mimetype="text/xml")</code></pre>

*25. create a data.xml file*

<pre><code><?xml version="1.0" encoding="UTF-8"?>
<results>
<project>{{ project }}</project>
<totals>{{ vote_total }}</totals>
</results></code></pre>

*26. create a crossdomain.xml method*

<pre><code>def crossdomain(request):
    return HttpResponse('<?xml version=\"1.0\"?><cross-domain-policy><allow-access-from domain=\"*\" /></cross-domain-policy>', mimetype="text/xml")</code></pre>

*27. extra credit... it votes up, but not down. how to fix?*

<pre><code>def vote(request, poll_id):
    p = get_object_or_404(Project, pk=poll_id)
    if request.POST['data'] == "0":
        value = -1
    else:
        value = 1
    v = p.vote_set.create(choice = value)
    v.save()
    return HttpResponse(status=200)</code></pre>


*28. create a test.py script*

<pre><code>import sys, urllib2, urllib

url = 'http://localhost:8000/polls/1/vote/'

recommend = "1"
data = urllib.urlencode([('data', recommend)])
req = urllib2.Request(url)
fd = urllib2.urlopen(req, data)
while 1:
    data = fd.read(1024)
    if not len(data):
        break
    sys.stdout.write(data)</code></pre>
